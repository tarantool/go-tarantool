package arrow_test

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/vmihailenco/msgpack/v5"

	"github.com/tarantool/go-tarantool/v3/arrow"
)

var longArrow, _ = hex.DecodeString("ffffffff70000000040000009effffff0400010004000000" +
	"b6ffffff0c00000004000000000000000100000004000000daffffff140000000202" +
	"000004000000f0ffffff4000000001000000610000000600080004000c0010000400" +
	"080009000c000c000c0000000400000008000a000c00040006000800ffffffff8800" +
	"0000040000008affffff0400030010000000080000000000000000000000acffffff" +
	"01000000000000003400000008000000000000000200000000000000000000000000" +
	"00000000000000000000000000000800000000000000000000000100000001000000" +
	"0000000000000000000000000a00140004000c0010000c0014000400060008000c00" +
	"00000000000000000000")

var tests = []struct {
	name string
	arr  []byte
	enc  []byte
}{
	{
		"abc",
		[]byte{'a', 'b', 'c'},
		[]byte{0xc7, 0x3, 0x8, 'a', 'b', 'c'},
	},
	{
		"empty",
		[]byte{},
		[]byte{0xc7, 0x0, 0x8},
	},
	{
		"one",
		[]byte{1},
		[]byte{0xd4, 0x8, 0x1},
	},
	{
		"long",
		longArrow,
		[]byte{
			0xc8, 0x1, 0x10, 0x8, 0xff, 0xff, 0xff, 0xff, 0x70, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0,
			0x0, 0x9e, 0xff, 0xff, 0xff, 0x4, 0x0, 0x1, 0x0, 0x4, 0x0, 0x0, 0x0, 0xb6, 0xff, 0xff,
			0xff, 0xc, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,
			0x4, 0x0, 0x0, 0x0, 0xda, 0xff, 0xff, 0xff, 0x14, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0,
			0x4, 0x0, 0x0, 0x0, 0xf0, 0xff, 0xff, 0xff, 0x40, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,
			0x61, 0x0, 0x0, 0x0, 0x6, 0x0, 0x8, 0x0, 0x4, 0x0, 0xc, 0x0, 0x10, 0x0, 0x4, 0x0, 0x8,
			0x0, 0x9, 0x0, 0xc, 0x0, 0xc, 0x0, 0xc, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x8, 0x0,
			0xa, 0x0, 0xc, 0x0, 0x4, 0x0, 0x6, 0x0, 0x8, 0x0, 0xff, 0xff, 0xff, 0xff, 0x88, 0x0,
			0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x8a, 0xff, 0xff, 0xff, 0x4, 0x0, 0x3, 0x0, 0x10, 0x0,
			0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xac, 0xff, 0xff,
			0xff, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x0, 0x14, 0x0,
			0x4, 0x0, 0xc, 0x0, 0x10, 0x0, 0xc, 0x0, 0x14, 0x0, 0x4, 0x0, 0x6, 0x0, 0x8, 0x0, 0xc,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		},
	},
}

func TestEncodeArrow(t *testing.T) {
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			buf := bytes.NewBuffer([]byte{})
			enc := msgpack.NewEncoder(buf)

			arr, err := arrow.MakeArrow(tt.arr)
			require.NoError(t, err)

			err = enc.Encode(arr)
			require.NoError(t, err)

			require.Equal(t, tt.enc, buf.Bytes())
		})

	}
}

func TestDecodeArrow(t *testing.T) {
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			buf := bytes.NewBuffer(tt.enc)
			dec := msgpack.NewDecoder(buf)

			var arr arrow.Arrow
			err := dec.Decode(&arr)
			require.NoError(t, err)

			require.Equal(t, tt.arr, arr.Raw())
		})
	}
}
