// Code generated by github.com/tarantool/go-option; DO NOT EDIT.

package arrow

import (
	"fmt"

	"github.com/vmihailenco/msgpack/v5"
	"github.com/vmihailenco/msgpack/v5/msgpcode"

	"github.com/tarantool/go-option"
)

// OptionalArrow represents an optional value of type Arrow.
// It can either hold a valid Arrow (IsSome == true) or be empty (IsZero == true).
type OptionalArrow struct {
	value  Arrow
	exists bool
}

// SomeOptionalArrow creates an optional OptionalArrow with the given Arrow value.
// The returned OptionalArrow will have IsSome() == true and IsZero() == false.
func SomeOptionalArrow(value Arrow) OptionalArrow {
	return OptionalArrow{
		value:  value,
		exists: true,
	}
}

// NoneOptionalArrow creates an empty optional OptionalArrow value.
// The returned OptionalArrow will have IsSome() == false and IsZero() == true.
//
// Example:
//
//	o := NoneOptionalArrow()
//	if o.IsZero() {
//	    fmt.Println("value is absent")
//	}
func NoneOptionalArrow() OptionalArrow {
	return OptionalArrow{}
}

func (o OptionalArrow) newEncodeError(err error) error {
	if err == nil {
		return nil
	}
	return &option.EncodeError{
		Type:   "OptionalArrow",
		Parent: err,
	}
}

func (o OptionalArrow) newDecodeError(err error) error {
	if err == nil {
		return nil
	}

	return &option.DecodeError{
		Type:   "OptionalArrow",
		Parent: err,
	}
}

// IsSome returns true if the OptionalArrow contains a value.
// This indicates the value is explicitly set (not None).
func (o OptionalArrow) IsSome() bool {
	return o.exists
}

// IsZero returns true if the OptionalArrow does not contain a value.
// Equivalent to !IsSome(). Useful for consistency with types where
// zero value (e.g. 0, false, zero struct) is valid and needs to be distinguished.
func (o OptionalArrow) IsZero() bool {
	return !o.exists
}

// IsNil is an alias for IsZero.
//
// This method is provided for compatibility with the msgpack Encoder interface.
func (o OptionalArrow) IsNil() bool {
	return o.IsZero()
}

// Get returns the stored value and a boolean flag indicating its presence.
// If the value is present, returns (value, true).
// If the value is absent, returns (zero value of Arrow, false).
//
// Recommended usage:
//
//		if value, ok := o.Get(); ok {
//	     // use value
//		}
func (o OptionalArrow) Get() (Arrow, bool) {
	return o.value, o.exists
}

// MustGet returns the stored value if it is present.
// Panics if the value is absent (i.e., IsZero() == true).
//
// Use with caution â€” only when you are certain the value exists.
//
// Panics with: "optional value is not set" if no value is set.
func (o OptionalArrow) MustGet() Arrow {
	if !o.exists {
		panic("optional value is not set")
	}

	return o.value
}

// Unwrap returns the stored value regardless of presence.
// If no value is set, returns the zero value for Arrow.
//
// Warning: Does not check presence. Use IsSome() before calling if you need
// to distinguish between absent value and explicit zero value.
func (o OptionalArrow) Unwrap() Arrow {
	return o.value
}

// UnwrapOr returns the stored value if present.
// Otherwise, returns the provided default value.
//
// Example:
//
//	o := NoneOptionalArrow()
//	v := o.UnwrapOr(someDefaultOptionalArrow)
func (o OptionalArrow) UnwrapOr(defaultValue Arrow) Arrow {
	if o.exists {
		return o.value
	}

	return defaultValue
}

// UnwrapOrElse returns the stored value if present.
// Otherwise, calls the provided function and returns its result.
// Useful when the default value requires computation or side effects.
//
// Example:
//
//	o := NoneOptionalArrow()
//	v := o.UnwrapOrElse(func() Arrow { return computeDefault() })
func (o OptionalArrow) UnwrapOrElse(defaultValue func() Arrow) Arrow {
	if o.exists {
		return o.value
	}

	return defaultValue()
}

func (o OptionalArrow) encodeValue(encoder *msgpack.Encoder) error {
	value, err := o.value.MarshalMsgpack()
	if err != nil {
		return err
	}

	err = encoder.EncodeExtHeader(8, len(value))
	if err != nil {
		return err
	}

	_, err = encoder.Writer().Write(value)
	if err != nil {
		return err
	}

	return nil
}

// EncodeMsgpack encodes the OptionalArrow value using MessagePack format.
// - If the value is present, it is encoded as Arrow.
// - If the value is absent (None), it is encoded as nil.
//
// Returns an error if encoding fails.
func (o OptionalArrow) EncodeMsgpack(encoder *msgpack.Encoder) error {
	if o.exists {
		return o.newEncodeError(o.encodeValue(encoder))
	}

	return o.newEncodeError(encoder.EncodeNil())
}

func (o *OptionalArrow) decodeValue(decoder *msgpack.Decoder) error {
	tp, length, err := decoder.DecodeExtHeader()
	switch {
	case err != nil:
		return o.newDecodeError(err)
	case tp != 8:
		return o.newDecodeError(fmt.Errorf("invalid extension code: %d", tp))
	}

	a := make([]byte, length)
	if err := decoder.ReadFull(a); err != nil {
		return o.newDecodeError(err)
	}

	if err := o.value.UnmarshalMsgpack(a); err != nil {
		return o.newDecodeError(err)
	}

	o.exists = true
	return nil
}

func (o *OptionalArrow) checkCode(code byte) bool {
	return msgpcode.IsExt(code)
}

// DecodeMsgpack decodes a OptionalArrow value from MessagePack format.
// Supports two input types:
//   - nil: interpreted as no value (NoneOptionalArrow)
//   - Arrow: interpreted as a present value (SomeOptionalArrow)
//
// Returns an error if the input type is unsupported or decoding fails.
//
// After successful decoding:
//   - on nil: exists = false, value = default zero value
//   - on Arrow: exists = true, value = decoded value
func (o *OptionalArrow) DecodeMsgpack(decoder *msgpack.Decoder) error {
	code, err := decoder.PeekCode()
	if err != nil {
		return o.newDecodeError(err)
	}

	switch {
	case code == msgpcode.Nil:
		o.exists = false

		return o.newDecodeError(decoder.Skip())
	case o.checkCode(code):
		err := o.decodeValue(decoder)
		if err != nil {
			return o.newDecodeError(err)
		}
		o.exists = true

		return err
	default:
		return o.newDecodeError(fmt.Errorf("unexpected code: %d", code))
	}
}
